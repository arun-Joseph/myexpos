alias functionNum R1;
alias currentPID R2;

if (functionNum == FREE_USER_AREA_PAGE) then
  alias userAreaPageNum R8;
  userAreaPageNum = [PROCESS_TABLE + currentPID*16 + 11];

  backup;
  R1 = RELEASE_PAGE;
  R2 = userAreaPageNum;
  call MEMORY_MANAGER;
  restore;
endif;

if (functionNum == EXIT_PROCESS) then
  backup;
  R1 = FREE_PAGE_TABLE;
  R2 = currentPID;
  call PROCESS_MANAGER;
  restore;

  backup;
  R1 = FREE_USER_AREA_PAGE;
  R2 = currentPID;
  call PROCESS_MANAGER;
  restore;

  [PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
endif;

if (functionNum == FREE_PAGE_TABLE) then
  [PAGE_TABLE_BASE + currentPID*20 + 0] = -1;
  [PAGE_TABLE_BASE + currentPID*20 + 1] = "0000";
  [PAGE_TABLE_BASE + currentPID*20 + 2] = -1;
  [PAGE_TABLE_BASE + currentPID*20 + 3] = "0000";

  alias counter R5;
  counter = 4;
  while (counter < 20) do
    if([PAGE_TABLE_BASE + currentPID*20 + counter] == -1) then
      counter = counter + 2;
      continue;
    endif;

    backup;
    R1 = RELEASE_PAGE;
    R2 = [PAGE_TABLE_BASE + currentPID*20 + counter];
    call MEMORY_MANAGER;
    restore;

    [PAGE_TABLE_BASE + currentPID*20 + counter] = -1;
    [PAGE_TABLE_BASE + currentPID*20 + counter + 1] = "0000";
    counter = counter + 2;
  endwhile;

  counter = 2;
  while (counter < 10) do
    if ([DISK_MAP_TABLE + currentPID*10 + counter] == -1) then
      counter = counter + 1;
      if (counter == 4) then
        counter = 8;
      endif;
      continue;
    endif;

    R3 = currentPID;
    backup;
    R1 = RELEASE_BLOCK;
    R2 = [DISK_MAP_TABLE + currentPID*10 + counter];
    call MEMORY_MANAGER;
    restore;
    [DISK_MAP_TABLE + currentPID*10 + counter] = -1;

    counter = counter + 1;
    if (counter == 4) then
      counter = 8;
    endif;
  endwhile;

  counter = 4;
  while (counter < 8) do
    [DISK_MAP_TABLE + currentPID*10 + counter] = -1;
    counter = counter + 1;
  endwhile;
endif;

return;
