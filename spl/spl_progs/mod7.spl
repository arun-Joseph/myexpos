alias counter R0;
alias process_table_entry R1;

counter = 2;
while (counter < 54) do
  loadi(counter, counter + 13);
  counter = counter + 1;
endwhile;

loadi(59, 3);
loadi(60, 4);
loadi(61, 2);
loadi(62, 5);
loadi(63, 13);
loadi(64, 14);
loadi(65, 7);
loadi(66, 8);
loadi(67, 9);
loadi(68, 10);

//LOGIN_PROCESS
PTBR = PAGE_TABLE_BASE + 20*LOGIN_PROCESS;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 66;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

process_table_entry = PROCESS_TABLE + LOGIN_PROCESS*16;
[process_table_entry] = 0;
[process_table_entry + 1] = LOGIN_PROCESS;
[process_table_entry + 2] = LOGIN_PROCESS;
[process_table_entry + 3] = KERNEL;
[process_table_entry + 4] = CREATED;
[process_table_entry + 11] = 77;
[process_table_entry + 12] = 0;
[process_table_entry + 13] = 8*512;
[process_table_entry + 14] = PAGE_TABLE_BASE + 20;
[process_table_entry + 15] = 10;

[66*512] = [65*512 + 1];

counter = 496;
while(counter < 512) do
  [77*512 + counter] = -1;
  counter = counter + 2;
endwhile;

//SHELL_PROCESS
PTBR = PAGE_TABLE_BASE + 20*SHELL_PROCESS;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";
[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0110";

process_table_entry = PROCESS_TABLE + SHELL_PROCESS*16;
[process_table_entry + 0] = 0;
[process_table_entry + 1] = SHELL_PROCESS;
[process_table_entry + 2] = SHELL_PROCESS;
[process_table_entry + 3] = ROOT;
[process_table_entry + 4] = TERMINATED;
[process_table_entry + 11] = 80;
[process_table_entry + 12] = 0;
[process_table_entry + 13] = 8*512;
[process_table_entry + 14] = PAGE_TABLE_BASE + 40;
[process_table_entry + 15] = 10;

[78*512] = [67*512 + 1];

counter = 496;
while(counter < 512) do
  [80*512 + counter] = -1;
  counter = counter + 2;
endwhile;

//PROCESS_TABLE
counter = 3;
while (counter < SWAPPER_DAEMON) do
  [PROCESS_TABLE + counter*16] = 0;
  [PROCESS_TABLE + counter*16 + 4] = TERMINATED;
  counter = counter + 1;
endwhile;

//OPEN_FILE_TABLE
counter = 0;
while (counter < MAX_OPENFILE_NUM) do
  [OPEN_FILE_TABLE + counter*4] = -1;
  counter = counter + 1;
endwhile;

//SEMAPHORE_TABLE
counter = 0;
while (counter < MAX_SEM_COUNT) do
  [SEMAPHORE_TABLE + counter*4] = -1;
  [SEMAPHORE_TABLE + counter*4 + 1] = 0;
  counter = counter + 1;
endwhile;

//MEMORY_FREE_LIST
counter = 0;
while (counter < 83) do
  [MEMORY_FREE_LIST + counter] = 1;
  counter = counter + 1;
endwhile;

while (counter < 128) do
  [MEMORY_FREE_LIST + counter] = 0;
  counter = counter + 1;
endwhile;

//FILE_STATUS_TABLE
counter = 0;
while (counter < MAX_FILE_NUM) do
  [FILE_STATUS_TABLE + counter*4] = -1;
  [FILE_STATUS_TABLE + counter*4 + 1] = -1;
  counter = counter + 1;
endwhile;

//DISK_STATUS_TABLE
[DISK_STATUS_TABLE] = 0;

//SYSTEM_STATUS_TABLE
[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 4] = 0;
[SYSTEM_STATUS_TABLE + 5] = 0;

//TERMINAL_STATUS_TABLE
[TERMINAL_STATUS_TABLE] = 0;

//BUFFER_TABLE
counter = 0;
while (counter < MAX_BUFFER) do
  [BUFFER_TABLE + counter*4] = -1;
  [BUFFER_TABLE + counter*4 + 1] = 0;
  [BUFFER_TABLE + counter*4 + 2] = -1;
  counter = counter + 1;
endwhile;

//DISK_MAP_TABLE
counter = 0;
while (counter < 10) do
  [DISK_MAP_TABLE + 20 + counter] = -1;
  counter = counter + 1;
endwhile;
[DISK_MAP_TABLE + 24] = 9;
[DISK_MAP_TABLE + 25] = 10;

return;
