alias currentPID R15;
currentPID = [SYSTEM_STATUS_TABLE + 1];

alias userSP R5;
userSP = SP;

[PROCESS_TABLE + currentPID*16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID*16 + 11]*512 - 1;

alias sysCallNo R6;
sysCallNo = [[PTBR + 2*(userSP - 5)/512]*512 + (userSP - 5)%512];

alias physicalAddrRetVal R14;
physicalAddrRetVal = [PTBR + 2*(userSP - 1)/512]*512 + (userSP - 1)%512;

if (sysCallNo == INT_SEMLOCK) then
  [PROCESS_TABLE + currentPID*16 + 9] = INT_SEMLOCK;

  alias userAreaPage R7;
  userAreaPage = [PROCESS_TABLE + currentPID*16 + 11];

  alias semDescriptor R8;
  semDescriptor = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP - 4)%512];
  if (semDescriptor < 0 || semDescriptor >= 8 || [userAreaPage*512 + 496 + 2*semDescriptor] != SEMAPHORE) then
    [physicalAddrRetVal] = -1;
    [PROCESS_TABLE + currentPID*16 + 9] = 0;
    SP = userSP;
    ireturn;
  endif;

  alias semIndex R9;
  semIndex = [userAreaPage*512 + 496 + 2*semDescriptor + 1];
  while ([SEMAPHORE_TABLE + semIndex*4] != -1 && [SEMAPHORE_TABLE + semIndex*4] != currentPID) do
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_SEMAPHORE;
    [PROCESS_TABLE + currentPID*16 + 5] = semIndex;

    backup;
    call SCHEDULER;
    restore;
  endwhile;

  [SEMAPHORE_TABLE + semIndex*4] = currentPID;

  [physicalAddrRetVal] = 0;
  [PROCESS_TABLE + currentPID*16 + 9] = 0;
endif;

if (sysCallNo == INT_SEMUNLOCK) then
  [PROCESS_TABLE + currentPID*16 + 9] = INT_SEMUNLOCK;

  alias userAreaPage R7;
  userAreaPage = [PROCESS_TABLE + currentPID*16 + 11];

  alias semDescriptor R8;
  semDescriptor = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP - 4)%512];
  if (semDescriptor < 0 || semDescriptor >= 8 || [userAreaPage*512 + 496 + 2*semDescriptor] != SEMAPHORE) then
    [physicalAddrRetVal] = -1;
    [PROCESS_TABLE + currentPID*16 + 9] = 0;
    SP = userSP;
    ireturn;
  endif;

  alias semIndex R9;
  semIndex = [userAreaPage*512 + 496 + 2*semDescriptor + 1];
  if ([SEMAPHORE_TABLE + semIndex*4] != -1) then
    if ([SEMAPHORE_TABLE + semIndex*4] != currentPID) then
      [physicalAddrRetVal] = -2;
      [PROCESS_TABLE + currentPID*16 + 9] = 0;
      SP = userSP;
      ireturn;
    endif;

    [SEMAPHORE_TABLE + semIndex*4] = -1;

    alias counter R10;
    counter = 0;
    while (counter < MAX_PROC_NUM) do
      if ([PROCESS_TABLE + counter*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + counter*16 + 5] == semIndex) then
        [PROCESS_TABLE + counter*16 + 4] = READY;
        [PROCESS_TABLE + counter*16 + 5] = "";
      endif;
      counter = counter + 1;
    endwhile;
  endif;

  [physicalAddrRetVal] = 0;
  [PROCESS_TABLE + currentPID*16 + 9] = 0;
endif;

SP = userSP;
ireturn;
