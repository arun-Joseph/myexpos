alias functionNum R1;

if (functionNum == ACQUIRE_BUFFER) then
  alias bufferNum R2;
  alias currentPID R3;

  while ([BUFFER_TABLE + bufferNum*4 + 2] != -1) do
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_BUFFER;
    [PROCESS_TABLE + currentPID*16 + 5] = bufferNum;

    backup;
    call SCHEDULER;
    restore;
  endwhile;

  [BUFFER_TABLE + bufferNum*4 + 2] = currentPID;
endif;

if (functionNum == RELEASE_BUFFER) then
  alias bufferNum R2;
  alias currentPID R3;

  if ([BUFFER_TABLE + bufferNum*4 + 2] != currentPID) then
    R0 = -1;
    return;
  endif;

  [BUFFER_TABLE + bufferNum*4 + 2] = -1;

  alias counter R5;
  counter = 0;
  while (counter < MAX_PROC_NUM) do
    if ([PROCESS_TABLE + counter*16 + 4] == WAIT_BUFFER && [PROCESS_TABLE + counter*16 + 5] == currentPID) then
      [PROCESS_TABLE + counter*16 + 4] = READY;
      [PROCESS_TABLE + counter*16 + 5] = "";
    endif;
    counter = counter + 1;
  endwhile;

  R0 = 0;
endif;

if (functionNum == ACQUIRE_DISK) then
  alias currentPID R2;

  while ([DISK_STATUS_TABLE] == 1) do
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;

    backup;
    call SCHEDULER;
    restore;
  endwhile;

  [DISK_STATUS_TABLE] = 1;
  [DISK_STATUS_TABLE + 4] = currentPID;
endif;

if (functionNum == ACQUIRE_INODE) then
  alias inodeIndex R2;
  alias currentPID R3;

  while ([FILE_STATUS_TABLE + inodeIndex*4] != -1) do
    [PROCESS_TABLE + R3*16 + 4] = WAIT_FILE;
    [PROCESS_TABLE + R3*16 + 5] = inodeIndex;

    backup;
    call SCHEDULER;
    restore;
  endwhile;

  if ([INODE_TABLE + inodeIndex*16 + 1] == -1) then
    R0 = -1;
  else
    [FILE_STATUS_TABLE + inodeIndex*4] = currentPID;
    R0 = 0;
  endif;
endif;

if (functionNum == RELEASE_INODE) then
  alias inodeIndex R2;
  alias currentPID R3;

  if ([FILE_STATUS_TABLE + inodeIndex*4] != currentPID) then
    R0 = -1;
    return;
  endif;

  [FILE_STATUS_TABLE + inodeIndex*4] = -1;

  alias counter R5;
  counter = 0;
  while (counter < MAX_PROC_NUM) do
    if ([PROCESS_TABLE + counter*16 + 4] == WAIT_FILE && [PROCESS_TABLE + counter*16 + 5] == inodeIndex) then
      [PROCESS_TABLE + counter*16 + 4] = READY;
      [PROCESS_TABLE + counter*16 + 5] = "";
    endif;
    counter = counter + 1;
  endwhile;

  R0 = 0;
endif;

if (functionNum == ACQUIRE_SEMAPHORE) then
  alias currentPID R2;

  alias counter R0;
  counter = 0;
  while (counter < MAX_SEM_COUNT) do
    if ([SEMAPHORE_TABLE + counter*4 + 1] == 0) then
      [SEMAPHORE_TABLE + counter*4] = -1;
      [SEMAPHORE_TABLE + counter*4 + 1] = 1;
      break;
    endif;
    counter = counter + 1;
  endwhile;

  if (counter == 32) then
    counter = -1;
  endif;
endif;

if (functionNum == RELEASE_SEMAPHORE) then
  alias semIndex R2;
  alias currentPID R3;

  if ([SEMAPHORE_TABLE + semIndex*4] == R3) then
    [SEMAPHORE_TABLE + semIndex*4] = -1;

    alias counter R5;
    counter = 0;
    while (counter < MAX_PROC_NUM) do
      if ([PROCESS_TABLE + counter*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + counter*16 + 5] == semIndex) then
        [PROCESS_TABLE + counter*16 + 4] = READY;
        [PROCESS_TABLE + counter*16 + 5] = "";
      endif;
      counter = counter + 1;
    endwhile;
  endif;

  [SEMAPHORE_TABLE + semIndex*4 + 1] = [SEMAPHORE_TABLE + semIndex*4 + 1] - 1;
endif;

if (functionNum == ACQUIRE_TERMINAL) then
  alias currentPID R2;

  while ([TERMINAL_STATUS_TABLE] == 1) do
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;

    backup;
    call SCHEDULER;
    restore;
  endwhile;

  [TERMINAL_STATUS_TABLE] = 0;
  [TERMINAL_STATUS_TABLE + 1] = currentPID;
endif;

if (functionNum == RELEASE_TERMINAL) then
  alias currentPID R2;

  if ([TERMINAL_STATUS_TABLE + 1] != currentPID) then
    R0 = -1;
    return;
  endif;

  [TERMINAL_STATUS_TABLE] = 0;

  alias counter R5;
  counter = 0;
  while (counter < MAX_PROC_NUM) do
    if ([PROCESS_TABLE + counter*16 + 4] == WAIT_TERMINAL) then
      [PROCESS_TABLE + counter*16 + 4] = READY;
    endif;
    counter = counter + 1;
  endwhile;

  R0 = 0;
endif;

return;
