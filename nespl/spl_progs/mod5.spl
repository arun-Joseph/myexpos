alias currentPID R15;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
multipush(BP);

alias process_table_entry R5;
process_table_entry = PROCESS_TABLE + currentPID*16;
[process_table_entry + 12] = SP%512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

backup;
R1 = ACQUIRE_SCHED_LOCK;
call ACCESS_CONTROL;
restore;

alias counter R6;
alias newPID R7;
if ([SYSTEM_STATUS_TABLE + 5] != 0 && CORE == PRIMARY_CORE) then
  newPID = SWAPPER_DAEMON;
  if ([PROCESS_TABLE + newPID*16 + 4] == WAIT_DISK) then
    newPID = IDLE_PROCESS;
  endif;
else
  counter = (currentPID + 1)%16;
  while (counter != currentPID) do
    if (CORE == SECONDARY_CORE && ([SYSTEM_STATUS_TABLE + 5] != 0 || [SYSTEM_STATUS_TABLE + 7] != 0)) then
      counter = IDLE2_PROCESS;
      break;
    endif;

    if (counter == IDLE_PROCESS || counter == IDLE2_PROCESS || counter == SWAPPER_DAEMON) then
      counter = (counter + 1)%16;
      continue;
    endif;

    if (CORE == SECONDARY_CORE) then
      if (counter == LOGIN_PROCESS || counter == SHELL_PROCESS) then
        counter = (counter + 1)%16;
        continue;
      endif;
    endif;

    if(counter == [SYSTEM_STATUS_TABLE + 1] || counter == [SYSTEM_STATUS_TABLE + 6]) then
      counter = (counter + 1)%16;
      continue;
    endif;

    if (([PROCESS_TABLE + counter*16 + 4] == READY || [PROCESS_TABLE + counter*16 + 4] == CREATED)
      && [PROCESS_TABLE + counter*16 + 6] == 0) then
      break;
    endif;
    counter = (counter + 1)%16;
  endwhile;

  if (counter == currentPID) then
    if ([PROCESS_TABLE + counter*16 + 4] == READY || [PROCESS_TABLE + counter*16 + 4] == CREATED) then
      newPID = counter;
    else
      newPID = 14*CORE;
    endif;
  else
    newPID = counter;
  endif;
endif;

alias new_process_table R8;
new_process_table = PROCESS_TABLE + newPID*16;
SP = [new_process_table + 11]*512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 5*CORE + 1] = newPID;

backup;
R1 = RELEASE_LOCK;
R2 = SCHED_LOCK;
call ACCESS_CONTROL;
restore;

if ([new_process_table + 4] == CREATED) then
  SP = [new_process_table + 13];
  BP = [[new_process_table + 11]*512];
  [new_process_table + 4] = RUNNING;
  [new_process_table + 9] = 0;
  ireturn;
endif;

[new_process_table + 4] = RUNNING;
multipop(BP);

return;
