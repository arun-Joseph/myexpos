alias currentPID R15;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];

alias userSP R5;
userSP = SP;

[PROCESS_TABLE + currentPID*16 + 13] = SP;
SP = [PROCESS_TABLE + currentPID*16 + 11]*512 - 1;

alias sysCallNo R6;
sysCallNo = [[PTBR + 2*(userSP - 5)/512]*512 + (userSP - 5)%512];

alias physicalAddrRetVal R14;
physicalAddrRetVal = [PTBR + 2*(userSP - 1)/512]*512 + (userSP - 1)%512;

backup;
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
restore;

if (sysCallNo == INT_OPEN) then
  [PROCESS_TABLE + currentPID*16 + 9] = INT_OPEN;

  alias fileName R7;
  fileName = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP - 4)%512];

  alias userAreaPageNum R8;
  userAreaPageNum = [PROCESS_TABLE + currentPID*16 + 11];

  alias fileDescriptor R9;
  fileDescriptor = 0;
  while (fileDescriptor < 8) do
    if ([userAreaPageNum*512 + 496 + 2*fileDescriptor] == -1) then
      break;
    endif;
    fileDescriptor = fileDescriptor + 1;
  endwhile;

  if (fileDescriptor == 8) then
    [physicalAddrRetVal] = -3;

    backup;
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;

    [PROCESS_TABLE + currentPID*16 + 9] = 0;
    SP = userSP;
    ireturn;
  endif;

  alias fileIndex R10;
  multipush(R5, R6, R7, R8, R9, R14, R15);
  R1 = OPEN;
  R2 = fileName;
  call FILE_MANAGER;
  multipop(R5, R6, R7, R8, R9, R14, R15);
  fileIndex = R0;

  if (fileIndex < 0) then
    [physicalAddrRetVal] = fileIndex;

    backup;
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;

    [PROCESS_TABLE + currentPID*16 + 9] = 0;
    SP = userSP;
    ireturn;
  endif;

  [userAreaPageNum*512 + 496 + 2*fileDescriptor] = FILE;
  [userAreaPageNum*512 + 496 + 2*fileDescriptor + 1] = fileIndex;

  [physicalAddrRetVal] = fileDescriptor;
endif;

if (sysCallNo == INT_CLOSE) then
  [PROCESS_TABLE + currentPID*16 + 9] = INT_CLOSE;

  alias fileDescriptor R7;
  fileDescriptor = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP - 4)%512];

  alias userAreaPageNum R8;
  userAreaPageNum = [PROCESS_TABLE + currentPID*16 + 11];

  if (fileDescriptor < 0 || fileDescriptor >= 8 || [userAreaPageNum*512 + 496 + 2*fileDescriptor] != FILE) then
    [physicalAddrRetVal] = -1;

    backup;
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;

    [PROCESS_TABLE + currentPID*16 + 9] = 0;
    SP = userSP;
    ireturn;
  endif;

  alias fileIndex R9;
  fileIndex = [userAreaPageNum*512 + 496 + 2*fileDescriptor + 1];

  backup;
  R1 = CLOSE;
  R2 = fileIndex;
  call FILE_MANAGER;
  restore;

  [userAreaPageNum*512 + 496 + 2*fileDescriptor] = -1;
  [physicalAddrRetVal] = 0;
endif;

if (sysCallNo == INT_SEEK) then
  [PROCESS_TABLE + currentPID*16 + 9] = INT_SEEK;

  alias fileDescriptor R7;
  fileDescriptor = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP - 4)%512];

  alias offset R8;
  offset = [[PTBR + 2*(userSP - 3)/512]*512 + (userSP - 3)%512];

  alias userAreaPageNum R9;
  userAreaPageNum = [PROCESS_TABLE + currentPID*16 + 11];

  if (fileDescriptor < 0 || fileDescriptor >= 8 || [userAreaPageNum*512 + 496 + 2*fileDescriptor] != FILE) then
    [physicalAddrRetVal] = -1;

    backup;
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;

    [PROCESS_TABLE + currentPID*16 + 9] = 0;
    SP = userSP;
    ireturn;
  endif;

  alias fileIndex R10;
  fileIndex = [userAreaPageNum*512 + 496 + 2*fileDescriptor + 1];

  alias inodeIndex R11;
  inodeIndex = [OPEN_FILE_TABLE + fileIndex*4];

  multipush(R5, R6, R7, R8, R9, R10, R11, R14, R15);
  R1 = ACQUIRE_INODE;
  R2 = inodeIndex;
  R3 = currentPID;
  call RESOURCE_MANAGER;
  multipop(R5, R6, R7, R8, R9, R10, R11, R14, R15);

  if (R0 == -1) then
    [physicalAddrRetVal] = -1;

    backup;
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;

    SP = userSP;
    [PROCESS_TABLE + currentPID*16 + 9] = 0;
    ireturn;
  endif;

  alias Lseek R12;
  Lseek = [OPEN_FILE_TABLE + fileIndex*4 + 2];

  if ((Lseek + offset) < 0) then
    backup;
    R1 = RELEASE_INODE;
    R2 = inodeIndex;
    R3 = currentPID;
    call RESOURCE_MANAGER;
    restore;

    [physicalAddrRetVal] = -2;

    backup;
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;

    SP = userSP;
    [PROCESS_TABLE + currentPID*16 + 9] = 0;
    ireturn;
  endif;

  if (offset == 0) then
    [OPEN_FILE_TABLE + fileIndex*4 + 2] = 0;
  else
    if ((Lseek + offset) > [INODE_TABLE + inodeIndex*16 + 2]) then
      [OPEN_FILE_TABLE + fileIndex*4 + 2] = [INODE_TABLE + inodeIndex*16 + 2];
    else
      [OPEN_FILE_TABLE + fileIndex*4 + 2] = Lseek + offset;
    endif;
  endif;

  backup;
  R1 = RELEASE_INODE;
  R2 = inodeIndex;
  R3 = currentPID;
  call RESOURCE_MANAGER;
  restore;

  [physicalAddrRetVal] = 0;
endif;

backup;
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
restore;

SP = userSP;
[PROCESS_TABLE + currentPID*16 + 9] = 0;
ireturn;
